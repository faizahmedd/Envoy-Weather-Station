package stationType1;

import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import weatherStation.ISSAbstract;
import weatherStation.WeatherStats;

/**
 * This is the ISS application, which will capture
 * data generated by from sensors.
 * @author Phong Hoang Le, Jordan Holland
 * @version 1.0
 */
public class ISS extends ISSAbstract {

	/** Timer for all sensors. */
	private Timer myTimer;
	
	/** All sensors. */
	private SensorInterface humid, rain, temp, wind;
	
	/** Date of captured data. */
	private Date date;
	
	/** The timestamp when an entry is placed into WeatherStats. */
	private long entryTime;// = System.currentTimeMillis();
	
	/** The identification number of this weather station. */
	private int stationID;
	
	/** Indicates whether this station is on or off. */
	private boolean powerSwitch;
	
	/** A structure used to hold all data collected form the sensors. */
	private WeatherStats myWeatherStats;
	
	/** A helper string used to break down the data generated by the sensors to be
	 *  placed into WeatherStats structure.
	 */
	private String helper;
	
	/** A flag for whether or not the ISS is in debug mode or not. */
	private boolean debug = false;
	
		
	/**
	 * Constructor method.
	 */
	public ISS() {
		date = new Date();
		humid = new HumiditySensor();
		rain = new RainSensor();
		temp = new TemperatureSensor();
		wind = new WindSensor();
		powerSwitch = false;
		myWeatherStats = new WeatherStats(stationID);
	}
	
	/**
	 * This method will initialize very timer for all sensors.
	 */
	public void run() {
		//Set up task for timer
		TimerTask task = new TimerTask() {
			
			private String output;
			
			public void run() {
				date = new Date();
				output = "";
				output += date.toString() + "\n";
				output += humid.getData() + "\n";
				output += rain.getData() + "\n";
				output += temp.getData() + "\n";
				output += wind.getData() + "\n";
				//entryTime = System.currentTimeMillis() / 1000;
				helper = output;
				myWeatherStats.processString(generateString());
				//System.out.println(output);
			}
		};
		
		myTimer = new Timer();
		
		myTimer.schedule(task, 0, 2000);
	}
	
	
	public String generateString() {
		StringBuilder sb = new StringBuilder();
		
		helper = helper.replace("{", "");
		helper = helper.replace("}", "");
		helper = helper.replaceAll("([a-zA-Z])", "");
		helper = helper.replace(" ", "");
		helper = helper.replace(":", "");
		helper = helper.replace("°", "");
		helper = helper.replace("%", "");
		helper = helper.replace("\"", "");
		
		String[] values = helper.split("\n");
		String[] hums = values[1].split(",");
		String[] temps = values[3].split(",");
		String[] wind = values[4].split(",");	
		
		if (!debug) {
			entryTime = System.currentTimeMillis() / 1000;
		}

		sb.append("OutterTemp:" + entryTime + ":" + temps[0] + "|");
		sb.append("Barometric:" + entryTime + ":" + 0.0 + "|");
		sb.append("OutterHum:" + entryTime + ":" + hums[1] + "|");
		sb.append("RainDaily:" + entryTime + ":" + values[2] + "|");
		sb.append("InnerTemp:" + entryTime + ":" + temps[1] + "|");
		sb.append("InnerHum:" + entryTime + ":" + hums[0] + "|");
		sb.append("Chill:" + entryTime + ":" + 0.0 + "|");
		sb.append("RainMO:" + entryTime + ":" + 0.0 + "|");
		sb.append("WindS:" + entryTime + ":" + wind[0] + "|");
		sb.append("WindDir:" + entryTime + ":" + wind[1] + "|");
		//System.out.println(sb.toString());
		return sb.toString();
	}
	
	public int debugRun() {
		int result = 1;
		try {
		run();
		} catch(Exception e) {
			result = 0;
		}
		return result;
	}
	
	/**
	 * A method used solely for testing the functionality of generate string.
	 * 
	 * @param entry The string used to test generateString().
	 */
	public String debugGenerateString(String entry) {
		debug = true;
		helper = entry;
		return generateString();
	}
	
	/**
	 * Sets the station identification number of this ISS.
	 * 
	 * @param ID The new identification number of this ISS.
	 */
	public void setStationID(int ID) {
		stationID = ID;
	}
	
	/**
	 * Getter method for this station's identification number.
	 * 
	 * @return This station's identification number.
	 */
	public int getStationID() {
		return stationID;
	}
	
	/**
	 * Getter method for the most recent timestamp data was entered into
	 * WeatherStats.
	 * 
	 * @return This station's most recent data timestamp.
	 */
	public long getLastEntryTime() {
		return entryTime;
	}
	
	/**
	 * Sets the most recent timestamp data was entered into WeatherStats (Testing only).
	 * 
	 * @param value The new most recent timestamp.
	 */
	public void setLastEntryTime(long value) {
		entryTime = value;
	}
	
	/**
	 * Getter method for this station's power switch;
	 * 
	 * @return True, if the station is on. False, if the station is off
	 */
	public boolean getPowerSwitch() {
		return powerSwitch;
	}
	
	/**
	 * Sets if the station is currently powered on or off.
	 * 
	 * @param value True, if the station is now on. False, if the station is now off.
	 */
	public void setPowerSwitch(boolean value) {
		powerSwitch = value;
	}
	
	/**
	 * Getter method for this station's sensor data storage structure.
	 * 
	 * @return The sensor data storage structure.
	 */
	public WeatherStats getMyWeatherStats() {
		return myWeatherStats;
	}

}